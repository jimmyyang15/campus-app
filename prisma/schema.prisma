generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                 String              @id @default(uuid())
  role               Role                @default(USER)
  email              String              @unique
  hashedPassword     String?
  isMentor           Boolean             @default(false)
  username           String              @unique
  sessions           Session[]
  profile            Profile?
  emailVerified      Boolean             @default(false)
  emailVerification  EmailVerification?
  passwordResetToken PasswordResetToken?
  posts              Post[]
  reactions          Reaction[]
  club               Club?               @relation(fields: [clubId], references: [id])
  invitationsSent    Invitation[]        @relation("SentInvitations") // Invitations sent by the user
  invitationReceived Invitation?         @relation("ReceivedInvitations") // Invitations received by the user
  comment            Comment[]
  request            Request?
  clubId             String?
  submissions        Submission[]
  subscription       Subscription[]
  certificate        Certificate?
  absences           Absence[]
}

model Profile {
  id             String    @id @default(uuid())
  fullName       String
  city           String?
  dob            DateTime?
  profilePicture String?
  user           User      @relation(fields: [userId], references: [id])
  userId         String    @unique // relation scalar field (used in the `@relation` attribute above)
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model EmailVerification {
  id             String   @id @default(uuid())
  code           String
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  expiresAt      DateTime
  email          String   @unique
  temporaryToken String?
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  tokenHash String
}

model Post {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  title     String
  content   String
  media     String?
  comments  Comment[]
  reactions Reaction[]
}

model Reaction {
  id     String  @id @default(uuid())
  type   String
  post   Post?   @relation(fields: [postId], references: [id])
  postId String?
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  text      String
}

model Club {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String
  desc         String?
  members      User[]
  clubImage    String
  assignments  Assignment[]
  request      Request[]
  invitation   Invitation[]
  timeActivity String
  dayActivity  String
  schedules    Schedule[]
}

model Invitation {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  clubId      String
  club        Club     @relation(fields: [clubId], references: [id])
  sender      User     @relation("SentInvitations", fields: [senderId], references: [id]) // Sender of the invitation
  senderId    String // ID of the sender
  recipient   User     @relation("ReceivedInvitations", fields: [recipientId], references: [id]) // Recipient of the invitation
  recipientId String   @unique // ID of the recipient
}

model Assignment {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  name        String
  desc        String?
  file        String
  dueDate     DateTime
  submissions Submission[]
  club        Club?        @relation(fields: [clubId], references: [id])
  clubId      String?
}

model Submission {
  id           String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String?
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  files        String
}

model Request {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id])
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String   @id @default(uuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificate {
  id   String @id @default(uuid())
  file String
  user User   @relation(fields: [userId], references: [id])

  userId String @unique
}

model Schedule {
  id      String    @id @default(uuid())
  date    DateTime
  title   String
  clubId  String
  club    Club      @relation(fields: [clubId], references: [id])
  absence Absence[]
}

model Absence {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  reason     String?
  schedule   Schedule? @relation(fields: [scheduleId], references: [id])
  scheduleId String?
}
